<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>邱海梦旌的博客</title>
  
  
  <link href="https://blog.invictusqiu.top/atom.xml" rel="self"/>
  
  <link href="https://blog.invictusqiu.top/"/>
  <updated>2024-11-10T08:15:34.867Z</updated>
  <id>https://blog.invictusqiu.top/</id>
  
  <author>
    <name>邱海梦旌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在线教育平台</title>
    <link href="https://blog.invictusqiu.top/2024/05/27/OnlineEducation/"/>
    <id>https://blog.invictusqiu.top/2024/05/27/OnlineEducation/</id>
    <published>2024-05-27T11:04:00.000Z</published>
    <updated>2024-11-10T08:15:34.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>由于在开发该系统时，并未有书写开发文档的经验，而仅仅是记录了每一天的开发日志，但开发日志多达21篇，因此把所有开发日志放在博客当中是影响读者观感的，因此本篇文章仅仅是作为总结，如果有具体需要，请联系我，或者访问我的GitHub仓库。</p><h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><p>在线教育平台采用B2C模式，Spring Cloud搭建整个微服务架构，后台采用Spring Boot+MySQL+MyBatis-Plus+Redis，并且结合Vue前端框架，采用Nuxt服务端渲染技术来优化前端页面，运用阿里云视频点播技术。在管理系统的后台中，运用Spring Security进行用户认证和授权，以确保对不同用户权限的细致划分。在用户的登录系统方面，则采纳了手机验证码注册和登录方式，并运用JWT生成Token以实现便捷的单点登录。此外，用户通过微信支付来进行课程购买。</p><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li>Spring Boot</li><li>Spring Cloud</li><li>MySQL</li><li>MyBatis-Plus</li><li>Redis</li><li>Spring Security</li><li>EasyExcel</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>Vue</li><li>Nuxt</li><li>ElementUI</li><li>Axios</li><li>ECharts</li></ul><h1 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h1><p>在线教育平台后台管理系统的前端使用的是vue-admin-template模板<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/BackendLogin.jpg"                                     ></p><h2 id="讲师管理"><a href="#讲师管理" class="headerlink" title="讲师管理"></a>讲师管理</h2><p>对讲师进行增删改查操作，后端集成了阿里云OSS，用于讲师头像的上传。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/AdminTeachers.png"                                     ><br><strong>开发中值得一提的：</strong><br>vue-router导航切换 时，如果两个路由都渲染同个组件，组件会重（chong）用,<br>组件的生命周期钩子（created）不会再被调用, 使得组件的一些数据无法根据 path的改变得到更新<br>因此：  </p><ol><li>我们可以在watch中监听路由的变化，当路由变化时，重新调用created中的内容；  </li><li>在init方法中我们判断路由的变化，如果是修改路由，则从api获取表单数据。<br>如果是新增路由，则重新初始化表单数据<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123; <span class="comment">// 监听</span></span><br><span class="line">    $route(to, <span class="keyword">from</span>) &#123; <span class="comment">// 路由变化方式，路由发生变化，方法就会执行</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123; <span class="comment">// 页面渲染之前执行</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 判断路径是否有id值</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span>) &#123;</span><br><span class="line">        <span class="comment">// 从路径获取id值</span></span><br><span class="line">        <span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">        <span class="comment">// 调用根据id查询的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getInfo</span>(id)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 路径没有id值，做添加</span></span><br><span class="line">        <span class="comment">// 清空表单</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">teacher</span> = &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="课程分类管理"><a href="#课程分类管理" class="headerlink" title="课程分类管理"></a>课程分类管理</h2><p>前端上传课程Excel表格，后端通过EasyExcel来处理表格并将其持久化存储于数据库中。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseExcel.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseCategory.png"                                     ></p><h2 id="课程管理"><a href="#课程管理" class="headerlink" title="课程管理"></a>课程管理</h2><p>可以查看课程详细信息并管理课程，如果是发布课程需要进行三个步骤，分别是“填写课程基本信息”、“创建课程大纲”、“最终发布”，需要按照该执行顺序去操作才能完整发布课程。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseAdmin.png"                                     ><br><strong>值得一提的是课程视频上传的实现</strong>  </p><ol><li>引入依赖<br>引入依赖存在问题<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/DependencyProblem.png"                                     ><br>mvn需要配置环境变量，这样才能在命令行中使用mvn命令<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/MavenPath.png"                                     ><br>上传视频<br>参考官网压缩包里面的sample示例代码改造<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/ExampleCode.png"                                     ><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;6 - How Does Project Submission Work - upload by sdk&quot;</span>;  <span class="comment">// 上传之后文件名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;E:\\6 - What If I Want to Move Faster.mp4&quot;</span>;   <span class="comment">// 本地文件路径和名称</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传视频的方法</span></span><br><span class="line">        <span class="type">UploadVideoRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadVideoRequest</span>(accessKeyId, accessKeySecret, title, fileName);</span><br><span class="line">        <span class="comment">/* 可指定分片上传时每个分片的大小，默认为2M字节 */</span></span><br><span class="line">        request.setPartSize(<span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024L</span>);</span><br><span class="line">        <span class="comment">/* 可指定分片上传时的并发线程数，默认为1，(注：该配置会占用服务器CPU资源，需根据服务器情况指定）*/</span></span><br><span class="line">        request.setTaskNum(<span class="number">1</span>);</span><br><span class="line">        <span class="type">UploadVideoImpl</span> <span class="variable">uploader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadVideoImpl</span>();</span><br><span class="line">        <span class="type">UploadVideoResponse</span> <span class="variable">response</span> <span class="operator">=</span> uploader.uploadVideo(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;VideoId=&quot;</span> + response.getVideoId() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 如果设置回调URL无效，不影响视频上传，可以返回VideoId同时会返回错误码。其他情况上传失败时，VideoId为空，此时需要根据返回错误码分析具体错误原因 */</span></span><br><span class="line">            System.out.print(<span class="string">&quot;VideoId=&quot;</span> + response.getVideoId() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;ErrorCode=&quot;</span> + response.getCode() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            System.out.print(<span class="string">&quot;ErrorMessage=&quot;</span> + response.getMessage() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></li><li>配置文件<div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service-vod</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境设置：dev、test、prod</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment"># 最大上传单个文件大小：默认1M</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">1024MB</span></span><br><span class="line">      <span class="comment"># 最大总上传的数据大小：默认10MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">1024MB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云 vod</span></span><br><span class="line"><span class="comment"># 不同的服务器，地址不同</span></span><br><span class="line"><span class="attr">aliyun:</span></span><br><span class="line">  <span class="attr">vod:</span></span><br><span class="line">    <span class="attr">file:</span></span><br><span class="line">      <span class="attr">keyid:</span> </span><br><span class="line">      <span class="attr">keysecret:</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li><li>VodApplication<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.invictusqiu&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VodApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(VodApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>工具类<br>常量读取工具类，读取配置文件的内容<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConstantVodUtils</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.vod.file.keyid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keyid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.vod.file.keysecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String keysecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义公开常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESS_KEY_ID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ACCESS_KEY_SECRET;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ACCESS_KEY_ID = keyid;</span><br><span class="line">        ACCESS_KEY_SECRET = keysecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>控制器<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/eduvod/video&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VodController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VodService vodService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传视频到阿里云</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;uploadAlyVideo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">uploadAlyVideo</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="comment">// 返回上传视频id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">videoId</span> <span class="operator">=</span> vodService.uploadVideoAly(file);</span><br><span class="line">        <span class="keyword">return</span> Result.ok().data(<span class="string">&quot;videoId&quot;</span>,videoId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>服务实现类<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VodServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">VodService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上传视频到阿里云（采用流式上传接口）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadVideoAly</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// accessKeyId, accessKeySecret</span></span><br><span class="line">            <span class="comment">// fileName: 上传文件原始名称</span></span><br><span class="line">            <span class="comment">// 01.03.09.mp4</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// title: 上传之后显示名称</span></span><br><span class="line">            <span class="comment">// 去除最后一个.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> fileName.substring(<span class="number">0</span>, fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// inputStream: 上传文件输入流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line"></span><br><span class="line">            <span class="type">UploadStreamRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadStreamRequest</span>(ConstantVodUtils.ACCESS_KEY_ID, ConstantVodUtils.ACCESS_KEY_SECRET, title, fileName, inputStream);</span><br><span class="line"></span><br><span class="line">            <span class="type">UploadVideoImpl</span> <span class="variable">uploader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadVideoImpl</span>();</span><br><span class="line">            <span class="type">UploadStreamResponse</span> <span class="variable">response</span> <span class="operator">=</span> uploader.uploadStream(request);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">videoId</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">                videoId = response.getVideoId();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果设置回调URL无效，不影响视频上传，可以返回VideoId同时会返回错误码。其他情况上传失败时，VideoId为空，此时需要根据返回错误码分析具体错误原因</span></span><br><span class="line">                videoId = response.getVideoId();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> videoId;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>前端<br>chapter.vue<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;上传视频&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-success</span>=<span class="string">&quot;handleVodUploadSuccess&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-remove</span>=<span class="string">&quot;handleVodRemove&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:before-remove</span>=<span class="string">&quot;beforeVodRemove&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:on-exceed</span>=<span class="string">&quot;handleUploadExceed&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:action</span>=<span class="string">&quot;BASE_API + &#x27;/eduvod/video/uploadAlyVideo&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;upload-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>上传视频<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tooltip</span> <span class="attr">placement</span>=<span class="string">&quot;right-end&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;content&quot;</span>&gt;</span>最大支持1G，<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      支持3GP、ASF、AVI、DAT、DV、FLV、F4V、<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      GIF、M2T、M4V、MJ2、MJPEG、MKV、MOV、MP4、<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      MPE、MPG、MPEG、MTS、OGG、QT、RM、RMVB、<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      SWF、TS、VOB、WMV、WEBM 等视频格式上传<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-question&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-tooltip</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fileList</span>: [], <span class="comment">// 上传视频的列表</span></span><br><span class="line"><span class="attr">BASE_API</span>: process.<span class="property">env</span>.<span class="property">BASE_API</span> <span class="comment">// 接口API地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功回调</span></span><br><span class="line"><span class="title function_">handleVodUploadSuccess</span>(<span class="params">response, file, fileList</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">videoSourceId</span> = response.<span class="property">data</span>.<span class="property">videoId</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 视图上传多于一个视频</span></span><br><span class="line"><span class="title function_">handleUploadExceed</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">warning</span>(<span class="string">&#x27;想要重新上传视频，请先删除已上传的视频&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div></li><li>nginx配置<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ /eduvod/ &#123;</span><br><span class="line">    proxy_pass http://localhost:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>配置nginx上传文件大小，否则上传时会有 413 (Request Entity Too Large) 异常<br>打开nginx主配置文件nginx.conf，找到http{}，添加<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 1024m;</span><br></pre></td></tr></table></figure></div></li><li>如果数据库没有视频名称<br>修改前端<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传视频成功调用的方法</span></span><br><span class="line"><span class="title function_">handleVodUploadSuccess</span>(<span class="params">response, file, fileList</span>) &#123;</span><br><span class="line">  <span class="comment">// 上传视频id赋值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">videoSourceId</span> = response.<span class="property">data</span>.<span class="property">videoId</span></span><br><span class="line">  <span class="comment">// 上传视频名称赋值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">video</span>.<span class="property">videoOriginalName</span> = file.<span class="property">name</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="统计分析"><a href="#统计分析" class="headerlink" title="统计分析"></a>统计分析</h2><p>统计分析页面，前端页面使用Echarts组件库实现图表展示，用户可以选择指定日期范围生成统计数据，包括范围内的用户登录数和注册数，以及课程播放数等数据。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/StatisticalAnalysis.png"                                     ><br>该模块使用了Feign远程调用<br>比如调用接口UcenterClient</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;service-ucenter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UcenterClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询某一天注册人数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/educenter/member/countRegister/&#123;day&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">countRegister</span><span class="params">(<span class="meta">@PathVariable(&quot;day&quot;)</span> String day)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>StatisticsDailyServiceImpl服务实现类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UcenterClient ucenterClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计某一天注册人数，生成统计数据</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerCount</span><span class="params">(String day)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加记录之前删除表相同日期的数据</span></span><br><span class="line">    QueryWrapper&lt;StatisticsDaily&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;date_calculated&quot;</span>, day);</span><br><span class="line">    baseMapper.delete(wrapper);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 远程调用得到某一天注册人数</span></span><br><span class="line">    <span class="type">Result</span> <span class="variable">registerResult</span> <span class="operator">=</span> ucenterClient.countRegister(day);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">countRegister</span> <span class="operator">=</span> (Integer)registerResult.getData().get(<span class="string">&quot;countRegister&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把获取数据添加数据库，统计分析表里面</span></span><br><span class="line">    <span class="type">StatisticsDaily</span> <span class="variable">sta</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatisticsDaily</span>();</span><br><span class="line">    sta.setRegisterNum(countRegister); <span class="comment">//注册人数</span></span><br><span class="line">    sta.setDateCalculated(day); <span class="comment">//统计日期</span></span><br><span class="line"></span><br><span class="line">    sta.setVideoViewNum(RandomUtils.nextInt(<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line">    sta.setLoginNum(RandomUtils.nextInt(<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line">    sta.setCourseNum(RandomUtils.nextInt(<span class="number">100</span>,<span class="number">200</span>));</span><br><span class="line">    baseMapper.insert(sta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>除此之外，启用定时任务实现每天统计<br>启动类添加注释</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//定时任务注解</span></span><br></pre></td></tr></table></figure></div><p>创建ScheduleTask类</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StatisticsDailyService staService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 定时器测试</span></span><br><span class="line"><span class="comment"> 0/5 * * * * ?表示每隔5秒执行一次这个方法</span></span><br><span class="line"><span class="comment">    @Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line"><span class="comment">    public void task1() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;********************task1执行了...&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在每天凌晨1点，把前一天的数据进行数据查询添加</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 0 1 * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task2</span><span class="params">()</span> &#123;</span><br><span class="line">        staService.registerCount(DateUtil.formatDate(DateUtil.addDays(<span class="keyword">new</span> <span class="title class_">Date</span>(),-<span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="前台用户系统"><a href="#前台用户系统" class="headerlink" title="前台用户系统"></a>前台用户系统</h1><h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><p>Nuxt.js 是一个基于 Vue.js 的轻量级应用框架,可用来创建服务端渲染 (SSR) 应用,也可充当静态站点引擎生成静态站点应用,具有优雅的代码结构分层和热加载等特性。<br><a class="link"   href="https://zh.nuxtjs.org/" >官方网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>幻灯片插件：vue-awesome-swiper</p><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>展示轮播图、热门课程等信息，然后对用户展示网站幻灯片、热门课程、名师等内容，为了提高访问速度使用了Redis缓存首页数据。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/HomePage.png"                                     ></p><h2 id="注册和登录"><a href="#注册和登录" class="headerlink" title="注册和登录"></a>注册和登录</h2><p>注册功能需要用户通过填写昵称、手机号，然后接收验证码的方式进行注册。如果使用手机号码注册，系统会通过阿里云短信服务向该用户发送短信验证码，后端保存该验证码来和用户输入的验证码进行比对。如果用户是以扫描微信二维码的方式进行注册，后端接收到该请求后会将页面重定向至二维码页面，扫码之后获得微信官方返回的临时票据，使用票据可以获得该用户微信账号的访问凭证和唯一标识，然后请求微信官方的接口地址得到该用户的账号信息，并将其持久化存储于数据库中，实现微信扫码注册功能。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/RegisterPage.png"                                     ><br>值得一提的是使用Redis解决验证码有效时间问题</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// springboot整合的Redis模板对象</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送短信的方法</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;send/&#123;phone&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendMsm</span><span class="params">(<span class="meta">@PathVariable</span> String phone)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.从redis获取验证码，如果获取到直接返回</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> redisTemplate.opsForValue().get(phone);</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(code)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.如果redis获取不到，进行阿里云发送</span></span><br><span class="line">    <span class="comment">// 生成随机值，传递阿里云进行发送</span></span><br><span class="line">    code = RandomUtil.getFourBitRandom();</span><br><span class="line">    Map&lt;String,Object&gt; param = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    param.put(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">    <span class="comment">// 调用service发送短信的方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isSend</span> <span class="operator">=</span> msmService.send(param,phone);</span><br><span class="line">    <span class="keyword">if</span> (isSend) &#123;</span><br><span class="line">        <span class="comment">// 发送成功，把发送成功验证码放到redis里面</span></span><br><span class="line">        <span class="comment">// 设置有效时间</span></span><br><span class="line">        redisTemplate.opsForValue().set(phone,code,<span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error().message(<span class="string">&quot;短信发送失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="课程列表"><a href="#课程列表" class="headerlink" title="课程列表"></a>课程列表</h2><p>课程列表，展示上架课程，对不同种类的课程进行了分类，可以按照销量、发布时间、售价来对课程列表进行排序。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseSchedule.png"                                     ><br>后端处理条件分页</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.条件查询带分页查询课程</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getCourseFrontList</span><span class="params">(Page&lt;EduCourse&gt; pageCourse, CourseFrontVo courseFrontVo)</span> &#123;</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;EduCourse&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 判断条件值是否为空，不为空拼接</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getSubjectParentId())) &#123; <span class="comment">//一级分类</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;subject_parent_id&quot;</span>, courseFrontVo.getSubjectParentId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getSubjectId())) &#123;   <span class="comment">//二级分类</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;subject_id&quot;</span>,courseFrontVo.getSubjectId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getBuyCountSort())) &#123;   <span class="comment">//关注度</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;buy_count&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getGmtCreateSort())) &#123;   <span class="comment">//最新</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;gmt_create&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(courseFrontVo.getPriceSort())) &#123;   <span class="comment">//价格</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只获取发布状态的课程</span></span><br><span class="line">    wrapper.eq(<span class="string">&quot;status&quot;</span>,<span class="string">&quot;Normal&quot;</span>);</span><br><span class="line">    baseMapper.selectPage(pageCourse,wrapper);</span><br><span class="line"></span><br><span class="line">    List&lt;EduCourse&gt; records = pageCourse.getRecords();</span><br><span class="line">    <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> pageCourse.getCurrent();</span><br><span class="line">    <span class="type">long</span> <span class="variable">pages</span> <span class="operator">=</span> pageCourse.getPages();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> pageCourse.getSize();</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageCourse.getTotal();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasNext</span> <span class="operator">=</span> pageCourse.hasNext();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasPrevious</span> <span class="operator">=</span> pageCourse.hasPrevious();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把分页数据获取出来，放到map集合</span></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;items&quot;</span>, records);</span><br><span class="line">    map.put(<span class="string">&quot;current&quot;</span>, current);</span><br><span class="line">    map.put(<span class="string">&quot;pages&quot;</span>, pages);</span><br><span class="line">    map.put(<span class="string">&quot;size&quot;</span>, size);</span><br><span class="line">    map.put(<span class="string">&quot;total&quot;</span>, total);</span><br><span class="line">    map.put(<span class="string">&quot;hasNext&quot;</span>, hasNext);</span><br><span class="line">    map.put(<span class="string">&quot;hasPrevious&quot;</span>, hasPrevious);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map返回</span></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="课程详情"><a href="#课程详情" class="headerlink" title="课程详情"></a>课程详情</h2><p>课程详情页，包含课程基本信息、分类、讲师等内容，课程分为免费和付费，如果是付费课程，那么前端的“立即观看”按钮会变为“立即购买”按钮，并且在该页面用户可以发表对该课程的评论。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/CourseDetail.png"                                     ></p><h2 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/VodPlayer.png"                                     ></p><h3 id="获取播放地址"><a href="#获取播放地址" class="headerlink" title="获取播放地址"></a>获取播放地址</h3><p><a class="link"   href="https://help.aliyun.com/document_detail/61064.html" >参考文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>前面的 03-使用服务端SDK 介绍了如何获取非加密视频的播放地址。直接使用03节的例子获取加密视频播放地址会返回如下错误信息<br>Currently only the AliyunVoDEncryption stream exists, you must use the Aliyun player to play or set the value of ResultType to Multiple.<br>目前只有AliyunVoDEncryption流存在，您必须使用Aliyun player来播放或将ResultType的值设置为Multiple。<br>因此在testGetPlayInfo测试方法中添加 ResultType 参数，并设置为true  </p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">privateParams.put(<span class="string">&quot;ResultType&quot;</span>, <span class="string">&quot;Multiple&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>此种方式获取的视频文件不能直接播放，必须使用阿里云播放器播放</p><h3 id="视频播放器"><a href="#视频播放器" class="headerlink" title="视频播放器"></a>视频播放器</h3><p><a class="link"   href="https://help.aliyun.com/document_detail/61109.html" >参考文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><strong>视频播放器介绍</strong><br>阿里云播放器SDK（ApsaraVideo Player SDK）是阿里视频服务的重要一环，除了支持点播和直播的基础播放功能外，深度融合视频云业务，如支持视频的加密播放、安全下载、清晰度切换、直播答题等业务场景，为用户提供简单、快速、安全、稳定的视频播放服务。</p><p><strong>集成视频播放器</strong><br><a class="link"   href="https://help.aliyun.com/document_detail/51991.html" >参考文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>参考 【播放器简单使用说明】一节<br>引入脚本文件和css文件</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>初始化视频播放器</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">class</span>=<span class="string">&quot;prism-player&quot;</span> <span class="attr">id</span>=<span class="string">&quot;J_prismPlayer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> player = <span class="keyword">new</span> <span class="title class_">Aliplayer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">id</span>: <span class="string">&#x27;J_prismPlayer&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">autoplay</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cover</span>: <span class="string">&#x27;http://liveroom-img.oss-cn-qingdao.aliyuncs.com/logo.png&#x27;</span>,  </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//播放配置</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="keyword">function</span>(<span class="params">player</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;播放器创建好了。&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>1. 播放地址播放</strong><br>在Aliplayer的配置参数中添加如下属性</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//播放方式一：支持播放地址播放,此播放优先级最高，此种方式不能播放加密视频</span></span><br><span class="line"><span class="attr">source</span>: <span class="string">&#x27;你的视频播放地址&#x27;</span>,</span><br></pre></td></tr></table></figure></div><p>启动浏览器运行，测试视频的播放</p><p><strong>2. 播放凭证播放（推荐）</strong><br>阿里云播放器支持通过播放凭证自动换取播放地址进行播放，接入方式更为简单，且安全性更高。播放凭证默认时效为100秒（最大为3000秒），只能用于获取指定视频的播放地址，不能混用或重复使用。如果凭证过期则无法获取播放地址，需要重新获取凭证。</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encryptType</span>:<span class="string">&#x27;1&#x27;</span>,<span class="comment">//如果播放加密视频，则需设置encryptType=1，非加密视频无需设置此项</span></span><br><span class="line">vid : <span class="string">&#x27;视频id&#x27;</span>,</span><br><span class="line">playauth : <span class="string">&#x27;视频授权码&#x27;</span>,</span><br></pre></td></tr></table></figure></div><p>注意：播放凭证有过期时间，默认值：100秒 。取值范围：100~3000。<br>设置播放凭证的有效期<br>在获取播放凭证的测试用例中添加如下代码  </p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="title function_">setAuthInfoTimeout</span>(200L);</span><br></pre></td></tr></table></figure></div><p><a class="link"   href="https://player.alicdn.com/aliplayer/setting/setting.html" >在线配置参考 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="后端获取播放凭证"><a href="#后端获取播放凭证" class="headerlink" title="后端获取播放凭证"></a>后端获取播放凭证</h3><p><strong>播放组件相关文档：</strong><br><a class="link"   href="https://help.aliyun.com/document_detail/51991.html?spm=a2c4g.11186623.2.39.478e192b8VSdEn" >集成文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://player.alicdn.com/aliplayer/setting/setting.html" >在线配置 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://player.alicdn.com/aliplayer/presentation/index.html" >功能展示 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="整合阿里云视频播放器"><a href="#整合阿里云视频播放器" class="headerlink" title="整合阿里云视频播放器"></a>整合阿里云视频播放器</h2><h3 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h3><p>修改VideoVo</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String videoSourceId;   <span class="comment">//视频id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>VodController</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据视频id获取视频凭证</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;getPlayAuth/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">getPlayAuth</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建初始化对象</span></span><br><span class="line">        <span class="type">DefaultAcsClient</span> <span class="variable">client</span> <span class="operator">=</span></span><br><span class="line">                InitVodClient.initVodClient(ConstantVodUtils.ACCESS_KEY_ID,ConstantVodUtils.ACCESS_KEY_SECRET);</span><br><span class="line">        <span class="comment">// 创建获取凭证request和response对象</span></span><br><span class="line">        <span class="type">GetVideoPlayAuthRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetVideoPlayAuthRequest</span>();</span><br><span class="line">        <span class="comment">// 向request设置视频id</span></span><br><span class="line">        request.setVideoId(id);</span><br><span class="line">        <span class="comment">// 调用方法得到凭证</span></span><br><span class="line">        <span class="type">GetVideoPlayAuthResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.getAcsResponse(request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">playAuth</span> <span class="operator">=</span> response.getPlayAuth();</span><br><span class="line">        <span class="keyword">return</span> Result.ok().data(<span class="string">&quot;playAuth&quot;</span>,playAuth);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EduException</span>(<span class="number">20001</span>,<span class="string">&quot;获取凭证失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h3><p>api<br>vod.js</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">getPlayAuth</span>(<span class="params">vid</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/eduvod/video/getPlayAuth/<span class="subst">$&#123;vid&#125;</span>`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建新的layouts<br>video.vue</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;guli-player&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">title</span>=<span class="string">&quot;在线教育&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;~/assets/img/logo.png&quot;</span> <span class="attr">lt</span>=<span class="string">&quot;在线教育&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nuxt</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.head</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.head</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.body</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>_id.vue<br>点击小节携带视频id跳转</p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;&#x27;/player/&#x27;+video.videoSourceId&quot;</span> <span class="attr">title</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>新建Page&#x2F;player&#x2F;_vid.vue  </p><div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 阿里云视频播放器样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/skins/default/aliplayer-min.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义播放器dom --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;J_prismPlayer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;prism-player&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&quot;</span>/&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="keyword">import</span> vod <span class="keyword">from</span> <span class="string">&#x27;@/api/vod&#x27;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">  <span class="attr">layout</span>: <span class="string">&#x27;video&#x27;</span>, <span class="comment">// 使用video布局</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">  <span class="title function_">asyncData</span>(<span class="params">&#123; params, error &#125;</span>) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">    <span class="keyword">return</span> vod.<span class="title function_">getPlayAuth</span>(params.<span class="property">vid</span>)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        <span class="keyword">return</span> &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">          <span class="attr">playAuth</span>: response.<span class="property">data</span>.<span class="property">playAuth</span>,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">          <span class="attr">vid</span>: params.<span class="property">vid</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">  &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">    <span class="keyword">new</span> <span class="title class_">Aliplayer</span>(&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      <span class="attr">id</span>: <span class="string">&#x27;J_prismPlayer&#x27;</span>,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      <span class="attr">vid</span>: <span class="variable language_">this</span>.<span class="property">vid</span>, <span class="comment">// 视频id</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      <span class="attr">playauth</span>: <span class="variable language_">this</span>.<span class="property">playAuth</span>, <span class="comment">// 播放凭证</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      <span class="comment">// encryptType: &#x27;1&#x27;, // 如果播放加密视频，则需设置encryptType=1，非加密视频无需设置此项</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      <span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      <span class="attr">height</span>: <span class="string">&#x27;500px&#x27;</span></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">    &#125;, <span class="keyword">function</span>(<span class="params">player</span>) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;播放器创建成功&#x27;</span>)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">  &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-handlebars"></span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>排错</p><blockquote><p>先看看播放器的js有没有引入<br>摁下F12，在网络中（network）查看，如果没有可以尝试在nuxt.config.js文件中的head中添加。<br>不要删除原_vid.vue中的</p></blockquote><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script charset=<span class="string">&quot;utf-8&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&quot;</span>/&gt;</span><br><span class="line"><span class="string">``</span><span class="string">`html</span></span><br><span class="line"><span class="string">把它放到`</span>&lt;template&gt;&lt;/template&gt;<span class="string">`标签外</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="title class_">JavaScript</span></span><br><span class="line"><span class="attr">head</span>: &#123;</span><br><span class="line">  <span class="attr">script</span>: [&#123; <span class="attr">src</span>: <span class="string">&#x27;https://g.alicdn.com/de/prismplayer/2.8.1/aliplayer-min.js&#x27;</span> &#125;],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="名师列表"><a href="#名师列表" class="headerlink" title="名师列表"></a>名师列表</h2><p>得到所有讲师信息，显示所有名师的头像、名称、简介内容。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/TeacherList.png"                                     ></p><h2 id="讲师详情"><a href="#讲师详情" class="headerlink" title="讲师详情"></a>讲师详情</h2><p>在名师列表页可以选择不同讲师的卡片，通过携带讲师id请求后端接口来查询该讲师的信息和所授课程，页面中展示了名师的详细信息和所授课程。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/TeacherDetail.png"                                     ></p><h2 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h2><p>课程支付，用户只有登录后才能购买对应课程。购买会生成课程订单和微信支付的二维码，在此支付期间每隔3秒会查询支付状态，只有扫码成功后才更新数据库中该订单的支付状态，一旦查询支付状态为“已支付”才能为用户开通课程观看权限。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/onlineEducation/OrderPay.png"                                     ><br>服务实现代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成微信支付二维码接口</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map <span class="title function_">createNative</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 1.根据订单号查询订单信息</span></span><br><span class="line">        QueryWrapper&lt;Order&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_no&quot;</span>,orderNo);</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.getOne(wrapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.使用map设置生成二维码需要的参数</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        m.put(<span class="string">&quot;appid&quot;</span>, <span class="string">&quot;wx74862e0dfcf69954&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;mch_id&quot;</span>, <span class="string">&quot;1558950191&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;nonce_str&quot;</span>, WXPayUtil.generateNonceStr());</span><br><span class="line">        m.put(<span class="string">&quot;body&quot;</span>, order.getCourseTitle());</span><br><span class="line">        m.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        m.put(<span class="string">&quot;total_fee&quot;</span>, order.getTotalFee().multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>)).longValue()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;spbill_create_ip&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;notify_url&quot;</span>, <span class="string">&quot;http://guli.shop/api/order/weixinPay/weixinNotify\n&quot;</span>);</span><br><span class="line">        m.put(<span class="string">&quot;trade_type&quot;</span>, <span class="string">&quot;NATIVE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.发送httpClient请求，传递参数xml格式，微信支付提供的固定地址</span></span><br><span class="line">        <span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpClient</span>(<span class="string">&quot;https://api.mch.weixin.qq.com/pay/unifiedorder&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置xml格式的参数</span></span><br><span class="line">        client.setXmlParam(WXPayUtil.generateSignedXml(m,<span class="string">&quot;T6m9iK73b0kn9g5v426MKfHQH7X8rKwb&quot;</span>));</span><br><span class="line">        client.setHttps(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 执行请求发送</span></span><br><span class="line">        client.post();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.得到发送请求返回的结果</span></span><br><span class="line">        <span class="comment">// 返回内容，是使用xml格式返回</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> client.getContent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把xml格式转换map集合，把map集合返回</span></span><br><span class="line">        Map&lt;String,String&gt; resultMap = WXPayUtil.xmlToMap(xml);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终返回数据的封装</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        map.put(<span class="string">&quot;course_id&quot;</span>, order.getCourseId());</span><br><span class="line">        map.put(<span class="string">&quot;total_fee&quot;</span>, order.getTotalFee());</span><br><span class="line">        map.put(<span class="string">&quot;result_code&quot;</span>, resultMap.get(<span class="string">&quot;result_code&quot;</span>));   <span class="comment">// 返回二维码操作状态码</span></span><br><span class="line">        map.put(<span class="string">&quot;code_url&quot;</span>, resultMap.get(<span class="string">&quot;code_url&quot;</span>)); <span class="comment">//二维码地址</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EduException</span>(<span class="number">20001</span>,<span class="string">&quot;生成二维码失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="项目仓库"><a href="#项目仓库" class="headerlink" title="项目仓库"></a>项目仓库</h1><p><a class="link"   href="https://github.com/QiuHaimengjing/online-education-platform-backend" >后端 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/QiuHaimengjing/online-education-platform-frontend-management" >后台管理系统前端 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://github.com/QiuHaimengjing/online-education-platform-frontend" >前台用户系统前端 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    <summary type="html">本篇文章用于总结在线教育平台整个项目的开发过程，以及项目的功能和技术栈</summary>
    
    
    
    <category term="项目" scheme="https://blog.invictusqiu.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="后端" scheme="https://blog.invictusqiu.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://blog.invictusqiu.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://blog.invictusqiu.top/categories/Java/"/>
    
    <category term="Vue" scheme="https://blog.invictusqiu.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="Java" scheme="https://blog.invictusqiu.top/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://blog.invictusqiu.top/tags/Spring-Boot/"/>
    
    <category term="Spring Cloud" scheme="https://blog.invictusqiu.top/tags/Spring-Cloud/"/>
    
    <category term="Vue" scheme="https://blog.invictusqiu.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>将我的blog部署在云服务器ECS上</title>
    <link href="https://blog.invictusqiu.top/2023/04/15/DeployBlog/"/>
    <id>https://blog.invictusqiu.top/2023/04/15/DeployBlog/</id>
    <published>2023-04-15T07:33:22.000Z</published>
    <updated>2024-11-10T07:33:23.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这次的网站部署工作还挺不容易的，是一次非常新奇的尝试，从此刻执笔写下这篇文章开始，我已经意识到这将是一个漫长的过程，也说明本篇的内容很长，对于我或是读者来说都是一段漫长的征途了。  </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_2.png"                      alt="网站主页" title="网站主页"                >  </p><p>早在一年前我就搭建好了我的blog，并且购买并配置了域名，那时候我的blog一直都是在GitHub Pages上的，但是访问速度实在太慢，于是想到把blog部署到国内的服务器上，本篇文章记录的正是这个部署的过程。</p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>那首先我得有一台国内的服务器，因此我购买了一台云服务器ECS。</p><blockquote><p>服务器的操作系统是<strong>CentOS  7.9 64位</strong></p></blockquote><p>之后配置服务器的过程，因为不同的操作系统命令会有区别，还请读者根据自己的操作系统查询命令。</p><h1 id="安装MATE桌面环境"><a href="#安装MATE桌面环境" class="headerlink" title="安装MATE桌面环境"></a>安装MATE桌面环境</h1><p><strong>这个环节是非必要的，读者可跳过，这只是我熟悉服务器的一个小过程。</strong>  </p><p>1.执行以下命令，更新系统的软件包  </p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y upgrade</span><br></pre></td></tr></table></figure></div><p>2.依次执行以下命令，安装MATE桌面环境<br><strong>之后会出现一些提示，都让他通过就行</strong></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groups install &quot;X Window System&quot;</span><br><span class="line">yum groups install &quot;MATE Desktop&quot;</span><br></pre></td></tr></table></figure></div><p>3.设置默认使用图形化桌面环境启动实例</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default graphical.target</span><br></pre></td></tr></table></figure></div><p>4.执行以下命令重启ECS实例，也可以在控制台手动重启</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_7.png"                      alt="控制台重启ECS" title="控制台重启ECS"                ></p><p>5.之后通过ECS管理控制台的VNC连接实例就可以进入到图形界面<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_8.png"                      alt="VNC连接ECS" title="VNC连接ECS"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_9.png"                      alt="图形界面" title="图形界面"                ></p><p>更多的详细过程可参考阿里云的文档：<br><a class="link"   href="https://help.aliyun.com/document_detail/41227.html" >如何在Linux系统的ECS实例中安装图形界面 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><blockquote><p>Git 是分布式版本控制系统，有了它我们能很容易地进行主机与服务器的同步  </p></blockquote><p>1.首先查看服务器上是否有安装Git</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></div><p>2.执行以下命令安装Git</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure></div><p>之后碰到提示直接输入y通过。安装完成会出现<strong>Complete!</strong>  </p><p>3.执行以下命令创建一个Git用户</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br></pre></td></tr></table></figure></div><p>4.设置Git账户的密码</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd git</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_10.png"                      alt="设置Git账户和密码" title="设置Git账户和密码"                ></p><h1 id="配置ssh"><a href="#配置ssh" class="headerlink" title="配置ssh"></a>配置ssh</h1><blockquote><p>要想实现主机和服务器的Git连接，我们需要给到服务器我们主机的密钥</p></blockquote><p>首先主机上要安装Git，主机Git的安装过程在此略过……<br>之前我一直都用着Git，所以已经配置过ssh，但为了温故而知新，咱们从头再来配置一遍。</p><h2 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h2><p>1.我们在<strong>Desktop右键选择Git Bash Here</strong>，然后输入命令，引号内为你的Git用户名</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &#x27;用户名&#x27;</span><br></pre></td></tr></table></figure></div><p>2.输入邮箱</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &#x27;邮箱&#x27;</span><br></pre></td></tr></table></figure></div><p>然后可以输入以下命令确认下账户</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></div><p>3.输入以下命令生成ssh，遇到暂停输入的情况就按下回车</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮箱&quot;</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_11.png"                      alt="配置ssh" title="配置ssh"                ><br><code>之后可以在C:\Users\用户名\.ssh目录下看到ssh</code></p><h2 id="更新Github的SSHkey"><a href="#更新Github的SSHkey" class="headerlink" title="更新Github的SSHkey"></a>更新Github的SSHkey</h2><p><strong>因为这里我们的ssh变了，所以Github上的ssh也应该重新设置下</strong>  </p><p>登录Github，点击个人头像中的Settings，找到SSH and GPG keys，删除原来的SSH Keys，建立新的SSH Keys  </p><p><strong>在ssh目录下找到id_rsa.pub</strong>，拷贝其中内容到GithubSSHkey中<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_12.png"                      alt="Github的SSH keys" title="Github的SSH keys"                ></p><p>OK，之后我们在使用Git管理你的Github仓库时就不会出问题了。</p><h2 id="将公钥给服务器"><a href="#将公钥给服务器" class="headerlink" title="将公钥给服务器"></a>将公钥给服务器</h2><p>将公钥给到服务器，在ssh目录下右键选择Git Bash Here，输入以下命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i id_rsa.pub git@服务器IP地址</span><br></pre></td></tr></table></figure></div><blockquote><p>注：服务器IP地址为公网IP地址</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_13.png"                      alt="将公钥给服务器" title="将公钥给服务器"                ></p><p>好的，到这里我们的ssh全部完成，让我们回到服务器上。</p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><blockquote><p>Nginx是一个高性能的HTTP和反向代理服务器，我选择使用Nginx来作为web服务器。</p></blockquote><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>1.执行以下命令安装Nginx，版本我选择了1.20.2</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure></div><p>2.安装依赖</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></div><p>3.上一步完成后，解压依赖</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.20.2.tar.gz</span><br></pre></td></tr></table></figure></div><p>4.解压后进行配置，依次输入以下命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.20.2</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_14.png"                      alt="配置Nginx" title="配置Nginx"                ><br>之后再依次输入以下命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div><p>到此Nginx就安装好了。</p><h2 id="运行Nginx及欢迎页面问题"><a href="#运行Nginx及欢迎页面问题" class="headerlink" title="运行Nginx及欢迎页面问题"></a>运行Nginx及欢迎页面问题</h2><p>进入到nginx文件夹下的sbin目录启动nginx，依次执行以下命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_15.png"                      alt="运行Nginx" title="运行Nginx"                ></p><p>之后在浏览器输入服务器的公网IP地址，就会出现Nginx的欢迎页面  </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_16.png"                      alt="Nginx欢迎页面" title="Nginx欢迎页面"                ></p><p>也有可能出现CentOS的欢迎页面  </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_17.png"                      alt="CentOS欢迎页面" title="CentOS欢迎页面"                ></p><p><strong>关于出现Nginx或CentOS页面的问题，我当时在这卡了一段时间，因为我格式化过服务器，第一次安装Nginx时出现的是Nginx的欢迎页面，第二次安装Nginx就出现了CentOS的欢迎页面，我就以为Nginx没安装成功，但是查看Nginx的确实在运行，于是找了下问题所在：</strong></p><blockquote><p>检查了阿里云的安全组策略，Nginx的安装步骤，都没有发现问题，安装Nginx时阅读nginx.conf配置文件会发现欢迎页index.html文件路径。找到上面路径下的html文件，通过阅读发现这就是CentOS欢迎页面显示的内容，这证明安装Nginx的欢迎页已经不是Nginx欢迎页面了，所以我们的Nginx安装是完全正确的，只是显示页面改变了。</p></blockquote><h2 id="Nginx页面无法访问和服务器防火墙问题"><a href="#Nginx页面无法访问和服务器防火墙问题" class="headerlink" title="Nginx页面无法访问和服务器防火墙问题"></a>Nginx页面无法访问和服务器防火墙问题</h2><p>在面对防火墙之前，我们找到服务器的网络安全组，看一看有没有开放<strong>80端口</strong>，没有的话要添加一个。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_18.png"                      alt="开放80端口" title="开放80端口"                ></p><p>然后我们回到服务器。  </p><p>1.查看防火墙状态</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure></div><p>如果没有运行，执行以下命令运行起来</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></table></figure></div><p>再次查看防火墙的状态会显示 <code>running</code>  </p><p>2.依次执行以下命令，手动开放80端口</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br></pre></td></tr></table></figure></div><p>出现<code>success</code><br>至此问题解决，可以正常访问Nginx欢迎页面。</p><h1 id="创建blog仓库和部署"><a href="#创建blog仓库和部署" class="headerlink" title="创建blog仓库和部署"></a>创建blog仓库和部署</h1><p>到这一步可以说是万事俱备，只欠东风了，现在我们需要进行：  </p><ol><li>新建仓库用来存放网站的内容</li><li>提交后把内容自动同步到站点目录</li></ol><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>1.依次执行以下命令进入git目录，新建一个仓库</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure></div><p>2.进入hooks文件夹</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog.git/</span><br><span class="line">cd hooks/</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_19.png"                      alt="创建仓库" title="创建仓库"                ></p><h2 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h2><p><strong>Git 钩子：Git 钩子是每次在 Git 存储库中发生特定事件时自动运行的脚本。它们允许您自定义 Git 的内部行为，并在开发生命周期的关键点触发可自定义的操作。</strong></p><ul><li>Git 钩子(hooks)是在 Git 仓库中特定事件(certain points)触发后被调用的脚本。</li><li>通过钩子可以自定义 Git 内部的相关（如 git push）行为，关键点（如 git push）触发自定义的行为。</li><li>Git 含有两种类型的钩子：客户端的和服务器端。</li><li>客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于接收部署提交的代码。实现服务器和本地的git互通。</li></ul><p>Git 钩子存在于每个 Git 仓库的 .git&#x2F;hooks 目录中。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_20.png"                      alt="Git 钩子" title="Git 钩子"                ></p><p>1.编写post-receive脚本</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi post-receive</span><br></pre></td></tr></table></figure></div><p>输入i进入INSERT模式，内容如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#nginx下html文件夹目录</span><br><span class="line">DIR=/usr/local/naginx/html</span><br><span class="line">git --work-tree=$&#123;DIR&#125; clean -fd</span><br><span class="line">#直接强制检出</span><br><span class="line">git --work-tree=$&#123;DIR&#125; checkout --force</span><br></pre></td></tr></table></figure></div><p>写好后ESC退出INSERT模式，:wq保存退出</p><p>2.授予运行权限</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure></div><p>3.授予git用户</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git post-receive</span><br></pre></td></tr></table></figure></div><p>4.给到一个读写的最高权限</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 post-receive</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_21.png"                                     ></p><p>5.回到git目录下，给仓库同样的操作</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git</span><br><span class="line">chmod 777 blog.git/</span><br><span class="line">chown -R git blog.git/</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_22.png"                                     ></p><p>6.被同步的目录也需要授予最高权限和git用户</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br><span class="line">chmod 777 html/</span><br><span class="line">chown -R git html/</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_23.png"                                     ></p><h2 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h2><p>打开hexo的主配置文件，添加deploy仓库</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">git@服务器IP地址:/home/git/blog.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_24.png"                                     ></p><h2 id="同步到服务器"><a href="#同步到服务器" class="headerlink" title="同步到服务器"></a>同步到服务器</h2><p>在本地blog文件夹下Git Bash Here，执行以下命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></div><p>完成后，输入服务器的IP地址就可以访问到网站了。  </p><p>可以检查下服务器上是否有我们的博客文件</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/html</span><br><span class="line">ls</span><br></pre></td></tr></table></figure></div><p>检查无误就大功告成了。</p><h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><p>这一步是让我的域名绑定服务器，绑定之后就能以域名访问网站了。这一步很简单，只需要添加域名解析就行。  </p><p><strong>这里添加两个记录：www和@，记录值都是服务器的IP地址</strong><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_25.png"                      alt="域名解析" title="域名解析"                ></p><h1 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h1><blockquote><p>SSL 证书就是遵守 SSL 安全套接层协议的服务器数字证书。而 SSL 安全协议最初是由美国网景 Netscape Communication 公司设计开发的,全称为:安全套接层协议 (Secure Sockets Layer) , 它指定了在应用程序协议(如 HTTP、Telnet、FTP)和 TCP&#x2F;IP 之间提供数据安全性 分层的机制,它是在传输通信协议(TCP&#x2F;IP)上实现的一种安全协议,采用公开密钥技术,它为 TCP&#x2F;IP 连接提供数据加密、服务器认证、消息完整性以及可选的客户机认证。由于此协议很好地解决了互联网明文传输的不安全问题,很快得到了业界的支持,并已经成为国际标准。SSL 证书由浏览器中“受信任的根证书颁发机构”在验证服务器身份后颁发,实现网站身份验证和加密传输功能。</p></blockquote><p>装载SSL证书产品后自动激活浏览器中显示“锁”型安全标志，地址栏以“https”开头。</p><h2 id="获取SSL证书"><a href="#获取SSL证书" class="headerlink" title="获取SSL证书"></a>获取SSL证书</h2><p>获取的方式挺多，可以购买，也可以免费获取，我的证书是领的阿里云免费给的20张证书。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_26.png"                      alt="免费的SSL证书" title="免费的SSL证书"                ></p><h2 id="下载SSL证书"><a href="#下载SSL证书" class="headerlink" title="下载SSL证书"></a>下载SSL证书</h2><p>点击证书栏右侧“下载”，找到服务器类型Nginx下载。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_27.png"                      alt="下载SSL证书" title="下载SSL证书"                ></p><h2 id="传输到服务器"><a href="#传输到服务器" class="headerlink" title="传输到服务器"></a>传输到服务器</h2><p>下载后的证书是一个压缩包，解压后会有两个文件：**.key和.pem**  </p><p>这里可以解压后传输到服务器，也可以把压缩包直接传输到服务器，但是需要在服务器上解压，所以服务器需要安装ZIP解压软件。这里我选择先解压再传输到服务器。  </p><p>安装unzip</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install unzip</span><br></pre></td></tr></table></figure></div><p>1.在Nginx根目录下conf文件夹下创建存放证书的目录cert</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf</span><br><span class="line">mkdir cert</span><br></pre></td></tr></table></figure></div><p>这里我选择先解压再传输到服务器。</p><p>2.在ECS控制台发送.key和.pem文件，目标路径为</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/conf/cert/</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_29.png"                                     ></p><p>上传成功后，进入cert文件夹可以看到存在这两个文件了<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_30.png"                                     ></p><h2 id="修改-server"><a href="#修改-server" class="headerlink" title="修改 server"></a>修改 server</h2><p>1..返回conf文件夹编辑Nginx配置文件nginx.conf，修改与证书相关的配置，目的是打开443端口。</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_28.png"                                     ></p><p>2.找到HTTPS server，<strong>将其内容解注释并修改</strong>。  </p><p>以下步骤含错误示范，还请读者不要着急模仿，可以先去下面看一眼“<strong>重启失败解决方案</strong>”的内容，方便之后一步到位。  </p><p>当然也可以跟着我的步骤来，之后修改错误。</p><p>原来的HTTPS server内容</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line"># server &#123;</span><br><span class="line">#     listen       443 ssl;</span><br><span class="line">#     server_name  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#     ssl_certificate      cert.pem;</span><br><span class="line">#     ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">#     ssl_session_cache    shared:SSL:1m;</span><br><span class="line">#     ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#     ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class="line">#     ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">#     location / &#123;</span><br><span class="line">#         root   html;</span><br><span class="line">#         index  index.html index.htm;</span><br><span class="line">#     &#125;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure></div><p>修改后的HTTPS server</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">HTTPS server</span><br><span class="line">   </span><br><span class="line">server &#123;</span><br><span class="line">    #HTTPS的默认访问端口为443</span><br><span class="line">    #如果未在此处配置HTTPS的默认访问端口，可能会造成Nginx无法启动</span><br><span class="line">    #如果使用Nginx 1.15.0及以上版本，请使用listen 443 ssl 代替listen 443和ssl on</span><br><span class="line">    listen       443 ssl;</span><br><span class="line">    #填写证书绑定的域名</span><br><span class="line">    server_name  www.invictusqiu.com;</span><br><span class="line">    root html;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line"></span><br><span class="line">    #填写证书文件名称</span><br><span class="line">    ssl_certificate      cert/9575407_www.invictusqiu.com.pem;</span><br><span class="line">    ssl_certificate_key  cert/9575407_www.invictusqiu.com.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #表示使用的加密套件的类型</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    #表示使用的TLS协议的类型，需要自行评估是否配置TLSv1.1协议</span><br><span class="line">    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    #Web网站程序存放目录</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>3.修改80端口server的内容</p><p>原来80端口的server</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">    #后面内容可忽略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>修改后的80端口server</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    #填写证书绑定的域名</span><br><span class="line">    server_name  www.invictusqiu.com;</span><br><span class="line">    #将所有HTTP请求通过rewrite指令重定向到HTTPS。</span><br><span class="line">    rewrite ^(.*)$ https://$host$1;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">    #后面内容可忽略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>服务器界面展示：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_31.png"                      alt="443端口原来的server" title="443端口原来的server"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_32.png"                      alt="443端口现在的server" title="443端口现在的server"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_33.png"                      alt="80端口原来的server" title="80端口原来的server"                ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_34.png"                      alt="80端口现在的server" title="80端口现在的server"                ></p><p><strong>修改完成后保存退出</strong></p><h2 id="重启Nginx服务"><a href="#重启Nginx服务" class="headerlink" title="重启Nginx服务"></a>重启Nginx服务</h2><p>来到nginx的sbin目录执行重启命令</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></div><p>发现报错：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_35.png"                      alt="重启错误" title="重启错误"                ></p><h2 id="重启失败解决方案"><a href="#重启失败解决方案" class="headerlink" title="重启失败解决方案"></a>重启失败解决方案</h2><p>好的，不论是跳转来这一步的朋友，还是跟着我步骤的朋友，<strong>现在看一看nginx.conf文件443端口那里的HTTPS server是不是注释掉的。</strong></p><p>也就是如下</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line"></span><br><span class="line"> server &#123;</span><br><span class="line">     listen       443 ssl;</span><br><span class="line">     server_name  localhost;</span><br></pre></td></tr></table></figure></div><p><strong>还没修改server的朋友请注意不要将HTTPS server解注释。</strong>  </p><p><strong>已经跟着我走的朋友请回去将其注释掉</strong>。  </p><p>之后再次重启Nginx服务就成功了。</p><h2 id="重启失败解决方案第二版"><a href="#重启失败解决方案第二版" class="headerlink" title="重启失败解决方案第二版"></a>重启失败解决方案第二版</h2><p>为什么有第二版解决方案呢，这版解决方案是针对：<br><strong>由于我们未装SSL模块，启动时，会提示nginx:[emerg]unknown directive ssl错误</strong>  </p><p>因为我是先遇到第一版错误，不知道错哪了，查资料时干脆把这一版的解决方案先做了，到最后发现我并未存在此版错误，但我认为还是有必要提一下的。  </p><p><strong>如果未做该版解决方案的朋友你跟着我前面的步骤很顺利的重启了，那么你可以跳过此小节到“放行443端口”。</strong>  </p><p>好的，让我们看看这一错误该怎么解决。</p><p>先执行<code>cd ~</code>  </p><p>1.检查你是否安装了ssl模块</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br><span class="line">./sbin/nginx -V</span><br></pre></td></tr></table></figure></div><p>如下图所示显示已经安装ssl模块则证明你不存在此版错误。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_36.png"                      alt="存在ssl模块" title="存在ssl模块"                ></p><p>2.如果没有ssl模块，我们先来到Nginx的解压目录，跟着我的步骤走的朋友路径如下，其他的朋友可能你的解压目录在&#x2F;usr&#x2F;local&#x2F;nginx-1.20.2</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">cd /root/nginx-1.20.2</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_37.png"                                     ></p><p>3.添加ssl模块</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_ssl_module</span><br></pre></td></tr></table></figure></div><p>4.执行make命令，编译安装包</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></div><p>5.查看objs文件夹下有一个nginx文件，这个就是新版程序，然后备份下之前的nginx</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.bak</span><br></pre></td></tr></table></figure></div><p>6.把编译好的nginx文件替换之前的</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp objs/nginx /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></div><p>如果无法替换，显示<br><code>cannot create regular file &#39;/usr/local/nginx/sbin/nginx&#39;: Text file busy</code></p><p>执行以下命令查看nginx进程</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure></div><p>发现正在运行</p><p>查看进程号，执行以下命令关闭nginx进程</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -QUIT 4809</span><br></pre></td></tr></table></figure></div><p>再次查看nginx进程，可以看到已经关闭，之后再次执行上面的替换命令，就能成功替换了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_38.png"                                     ></p><p>7.最后查看下是否安装成功了</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br><span class="line">./sbin/nginx -V</span><br></pre></td></tr></table></figure></div><p>显示有ssl模块，那么就证明我们安装成功了，之后就能正常重启nginx了。</p><h2 id="放行443端口"><a href="#放行443端口" class="headerlink" title="放行443端口"></a>放行443端口</h2><p>1.执行以下命令查看443端口是否在运行</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nplt lgrep 443</span><br></pre></td></tr></table></figure></div><p>可以看到正在运行<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_39.png"                      alt="443端口正常运行" title="443端口正常运行"                ></p><p>2.添加防火墙端口</p><p>查看防火墙运行状态</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure></div><p>显示<code>running</code>，则进入下一步。</p><p>查看开放的端口</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></div><p>发现没有443端口。</p><p>添加443端口</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=443/tcp --permanent</span><br></pre></td></tr></table></figure></div><p>显示<code>success</code></p><p>3.重新加载防火墙</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div><p>显示<code>success</code></p><p>再次查看开放的端口</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></div><p>可以看到存在443端口。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_40.png"                      alt="添加防火墙端口" title="添加防火墙端口"                ></p><p>4.检查本地443端口加载的HTTPS服务以及证书是否正常，域名名称为你自己的域名</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo | openssl s_client -connect 127.0.0.1:443 -servername invictusqiu.com 2&gt;/dev/null</span><br></pre></td></tr></table></figure></div><p>结果出现<code>SSL-Session</code>表示HTTPS服务正常运行。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_41.png"                      alt="SSL-Session" title="SSL-Session"                ></p><p>5.进入ECS安全组策略<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_42.png"                      alt="进入ECS安全组策略" title="进入ECS安全组策略"                ></p><p>放行TCP协议443端口的入方向请求<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_43.png"                      alt="放行443端口" title="放行443端口"                ></p><p>6.执行curl命令，查询服务器响应header信息</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -l https://invictusqiu.com</span><br></pre></td></tr></table></figure></div><p>结果显示HTTPS请求可以正常响应。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_44.png"                      alt="响应header信息" title="响应header信息"                ></p><p><strong>至此所有工作都完成了！</strong></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>此番部署工作可谓是困难重重，在此途中卡了好多次，甚至一个重启nginx的问题都解决了好久，关于我是怎么知道HTTPS server需要注释掉的呢？在网上翻来覆去搞了半天，看到这个视频：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/DeployBlog/DeployBlog_45.png"                                     ></p><p>哈哈哈，找个错误CPU都干烧了，结果是这种错误。<br>这种 Error 可谓是读计算机专业家常便饭的事了。  </p><p>最后分享一件事作为本篇文章的结尾：<br>&emsp;&emsp;我一直很钦佩纯粹的人，特别是以具体的目光投射到他身上时也依然纯粹的人，但这样的人只是我心目中的理想化，我也只是追寻着“这类不存在的人”的脚步前进罢了。几天前跟朋友聊天，聊到了跟几年前的自己做对比。假如需要你去做一件短时间内几乎不可能完成的事，以至于需要“燃尽”自己，你还会去做吗？我不可否认，在塑造世界观的那个年纪，现实、电影、小说、电子游戏等都或多或少影响到过我的世界观。<br>&emsp;&emsp;在几年前如果你问我这个问题，我的回答甚至偏向于“会”，但是现在我想还是算了罢，我想这就是现在的自己和几年前自己一个最大的对比。<br>&emsp;&emsp;我并不是否认“会”这个选项，只是它<strong>现在</strong>不是最优解了。所以我为什么钦佩纯粹的人，是因为他们从不会因为“时态”而去改变自身的选择，这也是我为什么仅仅只是追随他们而不是成为他们的原因吧。  </p><blockquote><p>本章一句：<br>以我残躯化烈火。—— Cyberpunk 2077 隐藏结局</p></blockquote>]]></content>
    
    
    <summary type="html">本篇文章用于记录我是如何将blog从github pages部署到云服务器ECS的</summary>
    
    
    
    <category term="项目" scheme="https://blog.invictusqiu.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="Hexo" scheme="https://blog.invictusqiu.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>中国大学生计算机设计大赛作品——电荷：正正子与负负美</title>
    <link href="https://blog.invictusqiu.top/2023/03/18/ElectricCharge-zhengfumei/"/>
    <id>https://blog.invictusqiu.top/2023/03/18/ElectricCharge-zhengfumei/</id>
    <published>2023-03-18T14:52:54.000Z</published>
    <updated>2024-11-10T07:34:19.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>&emsp;&emsp;本篇文章着重于记录我参加中国大学生计算机设计大赛的经历和作品创作过程。<br>&emsp;&emsp;《电荷：正正子与负负美》是我在大一时设计的微课作品，在我心中它值得写上一笔，文章内容包括创作它时的设计思路和实现方法，以及我的参赛历程。<br>&emsp;&emsp;《电荷：正正子与负负美》不算是一款成功的参赛作品，制作人也就是我也没有专业的微课制作水准，想要从此处取经的朋友还请海涵。<br>&emsp;&emsp;于我而言，本篇文章更重要的作用是用于勉励自己，“历历浮生，无非败而后成。”</p><blockquote><p>有关于中国大学生计算机设计大赛的介绍就不在此处赘述了，想要参赛的朋友还请自行去官网了解参赛时间和参赛项目及要求，本篇文章的作品类别属于微课类。<br><a class="link"   href="http://jsjds.blcu.edu.cn/" >中国大学生计算机设计大赛官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h1 id="作品设计思路"><a href="#作品设计思路" class="headerlink" title="作品设计思路"></a>作品设计思路</h1><h2 id="确定微课主题"><a href="#确定微课主题" class="headerlink" title="确定微课主题"></a>确定微课主题</h2><p>微课是什么？简而言之就是在短时间内能够将知识点讲授清楚的视频。</p><p>当初想要参赛的我，首先思考的就是课题。<strong>什么样的课题是我已经学过且掌握的，该知识点是否适合制作成微课，这个课题是否新颖，是否有利于故事创作。</strong></p><p>以微课的定义出发，我认为一部好的微课，它要做到<strong>能够将晦涩难懂的知识清清楚楚而且生动形象地讲授出来。</strong>  </p><p>因为我高中比较擅长物理，当我快速地回顾了高中物理3-1课本的内容时，我脑海中闪现出了正负电荷的具体形象，而且正负电荷之间的关系很奇妙，我应该可以试试……  </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/charges.png"                      alt="正负电荷" title="正负电荷"                >  </p><p>也因此我确定下了微课的主题：<strong>正负电荷</strong></p><h2 id="编写一则故事"><a href="#编写一则故事" class="headerlink" title="编写一则故事"></a>编写一则故事</h2><p>其实微课作品不一定需要生动的故事内容来支撑，但假如你能做到为该知识点编写故事，就能够使枯燥的知识变得有趣起来，因为我不擅长制作动画，所以有一则新颖的故事是非常有必要的。  </p><ul><li>人物：灵感来源于动画《pop子和pipi美的日常》，感觉挺顺口的，所以我将它们命名为“正正子”和“负负美”</li><li>关系：挚友</li><li>时间：过去</li><li>地点：地球</li><li>内容：以上帝视角的方式讲述正正子和负负美的历史和关系</li></ul><p>故事可以追溯到电荷的历史起源，将正负电荷拟人化，并赋予感情，与我们人类的情感产生共鸣，将库仑力比喻为人类之间的思念之情。  </p><p>具体的故事内容就不在此展开描述了，后面我会给出设计与开发文档的链接。</p><h1 id="作品实现方法"><a href="#作品实现方法" class="headerlink" title="作品实现方法"></a>作品实现方法</h1><h2 id="角色设计"><a href="#角色设计" class="headerlink" title="角色设计"></a>角色设计</h2><p>参考了《pop子和pipi美的日常生活》，哈哈，画风简单粗暴，对于人物的创作我是零基础的，在此也没什么可讲的。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/ZhengFu.png"                      alt="正正子和负负美" title="正正子和负负美"                ></p><h2 id="素材收集"><a href="#素材收集" class="headerlink" title="素材收集"></a>素材收集</h2><p>现在网上如此之多的素材资源，只要肯找都是有的。因为我的作品是属于简约风格，所以没有下很多功夫去网上收集素材，收集的仅仅是一些名人的图片和实物图。  </p><p>另外的一些图片我是从 <a class="link"   href="https://www.islide.cc/" >iSlide <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 上拿来的，当时我是开通了一个会员，节省了我很多收集素材的时间。  </p><h2 id="撰写说课稿"><a href="#撰写说课稿" class="headerlink" title="撰写说课稿"></a>撰写说课稿</h2><p>要演出故事，首先得有剧本，说课稿就是剧本，写好了剧本，才能有条不紊的进行整个故事的创作。将想好的故事写进说课稿，然后照着读上几遍，控制好节奏和时间，因为这基本奠定了之后微课的时长。  </p><p><strong>我推荐比赛的微课时长在6-8分钟之间，比赛有答辩环节，10分钟以内你得把作品进行展示和解说，所以控制好作品的时长很重要，必须腾出足够的时间解说。</strong></p><h2 id="动画制作"><a href="#动画制作" class="headerlink" title="动画制作"></a>动画制作</h2><p>这是最为核心的环节，微课动画制作方法多种多样，我知道的有 Flash，After Effects，还有一些本身就是为微课而生的软件比如Focusky。  </p><p>然而在制作过程中以上软件我都没用，我用的只是 PowerPonit，也就是 PPT,在固有观念里 PPT 就是做课件用的，但其实它是实实在在的动画制作软件，而缺点是制作起来较为繁杂。  </p><p>学习其他软件，我要考虑时间成本，PPT 动画我需要学的仅仅是在原来的基础上进行进阶，因此我在B站上看了许多 PPT 动画视频，从中进行学习。  </p><p><strong>PPT制作动画需要的不是高技术含量，是耐心，一张 PPT 多则可高达上百张动画，需要一步一步来组合。将文字在脑海中转换成图像，再用双手创作出来，动画制作就这么个过程。</strong></p><h2 id="视频制作"><a href="#视频制作" class="headerlink" title="视频制作"></a>视频制作</h2><p>那我们仅仅做好动画是不行的，我们还需要拍摄成视频，进行配乐和配音，以及添加字幕，等一系列后期处理。  </p><p>PPT 做的动画做成视频很简单，你可以直接以视频的方式导出。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/pptMovie1.png"                      alt="PPT导出视频" title="PPT导出视频"                >  </p><p>或者用录频软件录制一遍 PPT 的动画播放。<br>录频软件：N卡自带的录屏功能，OBS Studio，Bandicam(付费)等。  </p><p>录好视频后，进行配乐和配音，我当时用的是 Premiere，pr的话可能需要花些时间去学习如何使用，现在的话我知道的剪映也是不错的，易上手。  </p><p>配音的话简单粗暴，手机的录音功能加耳机就行，我当时是一句一句配的，这样不满意的话方便重新配。  </p><p>配完的音频文件导入pr中，和视频进行结合就大功告成了，《电荷：正正子与负负美》的配音全程都是由我一人配的，当然如果要进一步提升竞争力我还是建议找专业的配音来吧。  </p><p>挑选配乐的话，怎样合适怎样来，这范围就太大了。我当时挑选的是iPhone 5 广告Photos Every Day中的BGM—Rob Simonsen Blue</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>制作微课不需要高技术含量，制作一部微课，并且要用来参加竞赛的话，重要的是一定要记得<strong>创新</strong>，如果在此基础上你能设计出漂亮的动画和其他视觉、听觉上的体验那肯定是大大的加分项。  </p><p><strong>虽然没在文章中说有关参赛文档的事，但如果是想要参赛的朋友一定要认认真真填写所有参赛文档，后期答辩时评委会仔细看和提问的，尤其是国赛的评委。</strong></p><p><strong>如果是打算提取干货的朋友看到这里就可以离开了，后面的内容对你的帮助不大。</strong></p><h1 id="作品链接"><a href="#作品链接" class="headerlink" title="作品链接"></a>作品链接</h1><blockquote><p>链接：<a class="link"   href="https://pan.baidu.com/s/1QGm5GTxQxeMLMfO5QWZ8ng?pwd=star" >https://pan.baidu.com/s/1QGm5GTxQxeMLMfO5QWZ8ng?pwd=star <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>提取码：star </p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/yimeifasha.jpg"                                     ><br>我们下期文章再见。</p><h1 id="参赛历程"><a href="#参赛历程" class="headerlink" title="参赛历程"></a>参赛历程</h1><p><strong>打算提取干货的朋友看到这里就可以离开了，后面的内容对你帮助不大</strong>。  </p><p>既然是我的个人blog，我当然有必要记录下自己当时参赛的历程。  </p><h2 id="报名"><a href="#报名" class="headerlink" title="报名"></a>报名</h2><p>&emsp;&emsp;当时刚进入大学，对一切都是那么好奇，感觉自己想做的事有很多，感觉自己目标很清晰，很有干劲呢。头一次听到计算机设计大赛是在一次学科讲座上听老师和学姐分享的，当时很有精神啊，还和学姐积极互动，那时候就想我应该也可以做一个参赛作品出来吧，听说可以出省去其他学校比赛呢，这对于一个入学就被封锁的学生来说太有吸引力了。<br>&emsp;&emsp;到下学期时，报名开始，那肯定得报嘛，约上我两个舍友然后就报上了。难的是后面怎么做呢？我看了一些优秀的获奖作品，想从中取经，当时看了的感觉就是：哇这做的太好了，没点专业知识恐怕做不出来。那时候我们所有人都打退堂鼓，后来我提出做高中物理的电荷，这个题材比较好做，后面我们讨论了下，确定下来。<br>&emsp;&emsp;后面就由我创作了整个故事情节，但是难点又来了，怎么做动画，我们都尝试做了，但是效果不尽人意。我就硬照着B站上那些好看的PPT动画去做，花了很大功夫，后来成功了，当我做出开头时，我感觉我还是可以的。</p><h2 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h2><p>&emsp;&emsp;我做了两天，然后就放五一假期，当时我和舍友都回家了，那作品可能真就放弃了。回家后的两天抽空做了做，把开头做好，完成了30％，后面两天，花了大部分精力去做，尤其是第四天直接做到了凌晨5点。我当时就感觉灵感很充足，脑子中一幅幅画面涌现出来，效率特别高，毫无困意，那一天晚上直接就把动画全部做完了。<br>&emsp;&emsp;最后一天我在家弄好视频，回到学校弄好配音，然后就贴着时间点上交了。没想过拿奖，当时就没想要拿奖，可能一切都是徒劳，但是自己想做，想把这个故事写出来，画面呈现出来。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/ZhengFuCover.png"                                     ></p><h2 id="校级赛"><a href="#校级赛" class="headerlink" title="校级赛"></a>校级赛</h2><p>&emsp;&emsp;当时校级赛也需要答辩，第一次答辩我还是蛮紧张的，答辩当天，发现周围的参赛选手都做了答辩PPT，而我没做，当时心情就是崩了，答辩时我就放了一下作品，然后用作品本来的PPT做了介绍，当时觉得应该是没戏了，后面也没多想了，至少能锻炼一下自己的答辩能力……</p><h2 id="获奖"><a href="#获奖" class="headerlink" title="获奖"></a>获奖</h2><p>&emsp;&emsp;校级赛公布结果的那一天，我在上PS课，当时点开一看是一等奖！差点在课上笑出声，瞬间感觉自己所有的付出都值了，后来作品被交付给省上初评顺利通过了，拿到了省赛现场资格，只要拿到了省赛现场资格就意味着进入了国赛。</p><h2 id="省赛"><a href="#省赛" class="headerlink" title="省赛"></a>省赛</h2><p>&emsp;&emsp;省赛定在云南工商学院，没错，是线下赛，为期三天。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/gongshangxueyuan.jpg"                      alt="云南工商学院" title="云南工商学院"                ><br>&emsp;&emsp;第一天从学校出发，乘坐高铁到达了昆明市杨林大学城，入住了官方指定的酒店，然后去领取选手证和官方T恤，顺便抽了签。答辩是分组的，和我同行的两组学长学姐我们分到了不同组，但我们手气出奇一致，在组内把第1都包了，所以当天会很快答完辩，然后就可以在杨林耍一天啦。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/xianchang.jpg"                      alt="参赛物品" title="参赛物品"                ><br>&emsp;&emsp;第二天现场答辩，为什么我会强调一定要控制好微课时长，因为他只给10分钟的答辩时间，而正正子与负负美长达9分10秒，因此我必须在50秒内把作品介绍完，但可能吗？太难了，但这也没办法，那天答辩勉勉强强，紧张还是紧张，只能说自己的现场能力锻炼的还不够。评委老师问的问题主要是：应用了什么软件和技术，并且会挑出几张画面进行提问，然后给出一些建议。<br>&emsp;&emsp;第三天是领奖日，举行颁奖仪式，现场能看到云南省很厉害的计算机老师，当我看到C语言网课的普运伟老师时感觉挺奇妙的，有意义的是可以现场看到那些优秀作品展示，同行学长的数媒动画作品被评为了优秀作品，真的很厉害，我拿到了省级二等奖也算心满意足了。</p><h2 id="国赛"><a href="#国赛" class="headerlink" title="国赛"></a>国赛</h2><p>&emsp;&emsp;因为疫情原因，很遗憾无法去线下参赛，本来想着能去阜阳师范大学见见世面，长长见识的，后来官方将国赛改为了线上比赛。其实我就只是想感受比赛现场的氛围，享受比赛，无法线下比赛是比较遗憾的，不过现场的话省赛也体验过了嘛，只不过我更期待国赛的现场。<br>&emsp;&emsp;国赛答辩是采用腾讯会议答辩，流程都是一样的，放作品介绍作品，回答评委老师的问题。评委老师是会认真去看你写的设计和教学文档的，让我比较在意的是我教学设计文档内容写崩了，只怪我当时没好好检查文档内容，没有做到完美，小小的遗憾吧。最终国赛获得三等奖，能走到国赛在我当时看来是不敢想的，感觉一切都值了。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/rongyuqiang.jpg"                      alt="电荷：正正子与负负美" title="电荷：正正子与负负美"                ></p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>其实写到这不知该怎样结尾了，前段时间陪伴了我6年的游戏《崩坏3》第一部完结了，在游戏制作组的纪录片中，编剧烧鸡老师在最后说的话令我印象深刻：  </p><blockquote><p>今天的自己有没有变得比昨天更好，明天的自己会不会变得比今天更好，就像我今天坐在这里，在镜头前讲下这个故事，它只是一个普普通通的，随处可见的故事，总有一天，每个人会和这个故事告别，走向不同的方向，独属于你自己的下一页，但是那样就好，累了的话就停下脚步，怀念的话就回来看看，这个故事也一直都在，且行且看，尽力而为，不要害怕，不要后悔，就像《崩坏3》的slogan“为世界上所有的美好而战”一样，我们每个人都是在哭声中来到这个世界，但是却要笑着走向未来。</p></blockquote><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/ElectricCharge-zhengfumei/xinlingbushou.jpg"                      alt="《心灵捕手》台词" title="《心灵捕手》台词"                ></p>]]></content>
    
    
    <summary type="html">2021年第14届中国大学生计算机设计大赛获奖作品《电荷：正正子与负负美》设计思路</summary>
    
    
    
    <category term="生活" scheme="https://blog.invictusqiu.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.invictusqiu.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="人生经历" scheme="https://blog.invictusqiu.top/tags/%E4%BA%BA%E7%94%9F%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>C语言课程设计-校园导游系统</title>
    <link href="https://blog.invictusqiu.top/2023/01/16/CampusGuideSystem/"/>
    <id>https://blog.invictusqiu.top/2023/01/16/CampusGuideSystem/</id>
    <published>2023-01-16T07:45:38.000Z</published>
    <updated>2024-11-10T08:04:45.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>&emsp;&emsp;本篇文章的目的是记录下我设计并实现《 C 校园导游系统》的过程，其实我本来想要把这个系统做的很好，但是奈何本学期出现了一些突发事件，导致时间精力都很有限，所以只能暂时搁置了。<br>&emsp;&emsp;选择这个项目的初心是为了锻炼自己，但最终我在它身上只花费了3天时间，作为达到数据结构课程设计的要求它是完全满足的，但是对我而言离我想象中的要求还差得远，就像它只是一个游戏demo，并不是成品。<br>&emsp;&emsp;那为什么我还要拿出来做文章呢？我能力有限无法真正完成它，大概率以后也没时间去做它了，但是记录下万一哪天用上了呢，当然也可以给后辈一个参考价值吧。<br>&emsp;&emsp;不多说了，现在进入正题吧。</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><ul><li><p>提供直观的学校地图界面供用户进行查看，以点作为景点，以边作为道路；  </p></li><li><p>提供景点相关信息查询功能，能够查询景点位置和输出景点的相关信息；  </p></li><li><p>提供问路查询功能，用户只需输入起点和终点，系统就会为用户提供最短路径；  </p></li><li><p>提供景点类型查询功能，用户可查询相关类型建筑及其信息； </p></li><li><p><strong>总结：《校园导游咨询系统》需要为用户提供一个可视化的校园平面图，并且提供景点查询功能和最短路径查询功能，满足用户的对校园导游系统的基本需求。</strong></p></li></ul><h1 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h1><h2 id="地图设计"><a href="#地图设计" class="headerlink" title="地图设计"></a>地图设计</h2><p>要制作导游系统，首先就是明确我们的导游范围，为了明确如何画出地图，我查看了我们学校的地图。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/yxnumap.png"                      alt="玉溪师范学院地图" title="玉溪师范学院地图"                ><br>然后根据地图筛选出了15个景点建筑加入到了这次的系统地图中。<br>将15个地点抽象出来构成图结构<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/map1.png"                                     ></p><blockquote><p>1.东北门 2.大学生活动中心 3.实训大楼A 4.滋味苑 5.龙马公寓 6.后山 7.学生宿舍F,G幢 8.学生宿舍K,L,M,N幢 9.主教学区 10.品味苑 11.艺术综合楼 12.图书馆 13.运动场 14.东南门 15.传习馆</p></blockquote><p>OK,就这样一份地图模板就制作好了，也可以说图结构的顶点确定好了，那么接下来就是确定边权值。<br>测量边权值的方法，我这里我采用高德地图的测距小工具，几分钟就全部测量好了，将测量好的数据保存起来，之后用得到。  </p><p>接下来就将地图写入到系统中，就纯靠 printf 画图了<br>现在我们的地图模块就设计好了。但是现在只是一个没有任何信息的图，之后还将导入景点编号、景点信息、边权值。</p><h2 id="创建数据结构并初始化"><a href="#创建数据结构并初始化" class="headerlink" title="创建数据结构并初始化"></a>创建数据结构并初始化</h2><p>将我们测量好的数据保存于相应的.txt文件中，这里我将景点编号保存在<strong>Number.txt</strong>文件，景点名称保存在<strong>Name.txt</strong>文件，景点信息保存在<strong>info.txt</strong>文件，各两点间的距离（边权值）保存在<strong>Distance.txt</strong>文件。  </p><p>然后创建我们所需的数据结构</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> N 15<span class="comment">//顶点数目值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 22<span class="comment">//边数目值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VexType string<span class="comment">//顶点数据类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EdgeType int<span class="comment">//边数据类型</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f<span class="comment">//作为最大值</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//景点数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Spot</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> SpotInfo[<span class="number">50</span>];</span><br><span class="line">&#125;Spot;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图的数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">VexType V[N];<span class="comment">//顶点表</span></span><br><span class="line">EdgeType E[N][N];<span class="comment">//边表</span></span><br><span class="line"><span class="type">int</span> vnum, ednum;<span class="comment">//顶点数、边数</span></span><br><span class="line">&#125;Graph;</span><br></pre></td></tr></table></figure></div><p>初始化</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化图的顶点表，邻接矩阵等</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitGraph</span><span class="params">(Graph&amp; G)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化边表</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">G.E[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">G.ednum = G.vnum = <span class="number">0</span>;<span class="comment">//初始化顶点数、边数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>插入顶点和边</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入点函数，改变顶点表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertNode</span><span class="params">(Graph&amp; G, VexType v)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.vnum &lt; N)</span><br><span class="line">&#123;</span><br><span class="line">G.V[G.vnum++] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入边函数，改变邻接矩阵</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InsertEdge</span><span class="params">(Graph&amp; G, VexType v, VexType w, <span class="type">int</span> weight)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> p1, p2;</span><br><span class="line">p1 = p2 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (G.V[i] == v)p1 = i;</span><br><span class="line"><span class="keyword">if</span> (G.V[i] == w)p2 = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1 != <span class="number">-1</span> &amp;&amp; p2 != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">G.E[p1][p2] = G.E[p2][p1] = weight;<span class="comment">//无向图邻接矩阵对称</span></span><br><span class="line">G.ednum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建图，读取文件导入数据</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建图功能实现函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatGraph</span><span class="params">(Graph&amp; G)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> vn, an;<span class="comment">//顶点数，边数</span></span><br><span class="line">vn = N;</span><br><span class="line">an = M;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> str1[<span class="number">20</span>], str2[<span class="number">20</span>];</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">FILE* fp1 = fopen(<span class="string">&quot;Number.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">FILE* fp2 = fopen(<span class="string">&quot;Distance.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp1 == <span class="literal">NULL</span> &amp;&amp; fp2 == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从文件中读取景点编号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">count = <span class="built_in">fscanf</span>(fp1, <span class="string">&quot;%s&quot;</span>, str1);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">-1</span>)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">s1 = str1;</span><br><span class="line">InsertNode(G, s1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从文件中读取所有边的权值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">&#123;</span><br><span class="line">count = <span class="built_in">fscanf</span>(fp2, <span class="string">&quot;%s %s %d&quot;</span>, str1, str2, &amp;temp);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">-1</span>)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">s1 = str1;</span><br><span class="line">s2 = str2;</span><br><span class="line">InsertEdge(G, s1, s2, temp);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp1);</span><br><span class="line">fclose(fp2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>到这里我们的图就创建完成了</strong></p><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>无论是在教材还是各类算法书籍中都少不了的最短路径算法Dijkstra算法，是由荷兰计算机科学家 Edsger Wybe Dijkstra 在1956年发现的算法，戴克斯特拉算法使用类似广度优先搜索的方法解决赋权图的单源最短路径问题。Dijkstra 算法原始版本仅适用于找到两个顶点之间的最短路径，后来更常见的变体固定了一个顶点作为源结点然后找到该顶点到图中所有其它结点的最短路径，产生一个最短路径树。本算法每次取出未访问结点中距离最小的，用该结点更新其他结点的距离。  </p><blockquote><p>核心思想：按路径长度递增次序产生算法，将图数据结构分为顶点集V和边集E，接下来初始化图的顶点表和邻接矩阵，将所有边的权值设置为无穷大，然后插入点改变顶点表，插入边改变邻接矩阵。之后从第一个顶点开始计算最短路径，假如该顶点与其他顶点有边连接，则将其边权值加入到最短路径集，然后依次比较，最后选出最小的边权值，并记录前驱，然后从前驱开始又执行边权值的比较，直到最后到达终点结束，最短路径值即之前记录过的前驱的边权值相加的最终结果。</p></blockquote><p>这样讲还是难懂，那我们从头开始了解Dijkstra算法吧</p><p>下面以该图为例讲解Dijkstra算法寻找最短路径的过程<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra2.png"                                     ><br>以A为起始点，求A到BCDEF的最短路径  </p><p>要求A到其他5个点的最短距离，我们构造一个数组记录A到BCDEF5个点的路径距离。  </p><p>需要注意的是</p><ul><li>如果A能够直接到达节点，则使用路径长度，即边权值作为其距离。</li><li>如果A节点不能够直接到达节点则用无穷大表示A到该点的距离。</li><li>任何点到自身的距离都为0</li></ul><p>在最开始A到其余点的数组如下  </p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">10</td><td align="center">∞</td><td align="center">4</td><td align="center">∞</td><td align="center">∞</td></tr></tbody></table><p>Dijkstra算法的思想是：从以上最短距离数组中每次选择一个最近的点，将其作为下一个点，然后重新计算从起始点经过该点到其他所有点的距离，并更新最短距离的值，已经选取过的点就是确定了最短路径的点，不再参与下一次计算。  </p><p>我们来看看实际的选取过程</p><h3 id="第一次选取"><a href="#第一次选取" class="headerlink" title="第一次选取"></a>第一次选取</h3><p>构建好的数组是这样的  </p><table><thead><tr><th>A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td>0</td><td align="center">10</td><td align="center">∞</td><td align="center">4</td><td align="center">∞</td><td align="center">∞</td></tr><tr><td>第一步选取该最短路径数组中值最小的一个点。因为A点到本身不需要参与运算，所以从剩下的点中选择最短的一个是D。</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>第二步以<strong>A-D</strong>的距离为最近距离更新A点到所有点的距离。即相当于A点经过D点，计算A到其他点的距离。</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra3.png"                                     ><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-C:19<br>A-D: A-D:4<br>A-E: A-D-E:10<br>A-F: A-D-F:∞  </p><p>将现在A到各个点的距离和之前相比较，取最小值，更新BCE的距离，得到新的最短距离数组  </p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">6</td><td align="center">19</td><td align="center">4</td><td align="center">10</td><td align="center">∞</td></tr></tbody></table><h3 id="第二次选取"><a href="#第二次选取" class="headerlink" title="第二次选取"></a>第二次选取</h3><p>AD两点已经选取，不再参与下面的计算。  </p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">6</td><td align="center">19</td><td align="center">4</td><td align="center">10</td><td align="center">∞</td></tr></tbody></table><p>以B为最新点，更新最短距离数组<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra4.png"                                     ><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-B-C:14<br>A-D: A-D:4<br>A-E: A-D-B-E:12<br>A-F: A-D-B-F:∞</p><p>对比现在的最短距离和上一个数组的距离，到相同节点选最小的，更新最短距离数组。<br>C点由19更新成14，E点走A-D-E为10，<strong>距离更短所以不更新</strong>，得到如下数组：  </p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">6</td><td align="center">14</td><td align="center">4</td><td align="center">10</td><td align="center">∞</td></tr></tbody></table><h3 id="第三次选取"><a href="#第三次选取" class="headerlink" title="第三次选取"></a>第三次选取</h3><p>第一步：选取除了A B D节点之外的剩余节点中最短节点，为点E<br>第二步：以E点为最新节点，更新最短路径数组<br>因为在上一步中计算达到E点的距离时没有更新距离，A-D-E 为10 最短，所以更新E点到B C F点的距离时走的路径是A-D-E。注意这里的最短距离有对应的路径，选择最小值就是选择最短距离。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra5.png"                                     ><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-E-C:11<br>A-D: A-D:4<br>A-E: A-D-E:10<br>A-F: A-D-E-F:22<br>对比现在的最短距离和上一个数组的距离，到相同节点选最小的，更新最短距离数组。<br>更新C点走A-D-E-C为11，比之前的A-D-B-C 14距离更近，更新到F点距离，得到如下数组：  </p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">6</td><td align="center">11</td><td align="center">4</td><td align="center">10</td><td align="center">22</td></tr></tbody></table><h3 id="第四次选取"><a href="#第四次选取" class="headerlink" title="第四次选取"></a>第四次选取</h3><p>第一步：选取除了A B D E节点之外的剩余节点中最短节点，为点C<br>第二步：以C点为最新节点，更新最短路径数组<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra6.png"                                     ><br>A-A: 0<br>A-B: A-D-B:6<br>A-C: A-D-E-C:11<br>A-D: 4<br>A-E: A-D-E:10<br>A-F: A-D-E-C-F:16<br>对比现在的最短距离和上一个数组的距离，到相同节点选最小的，更新最短距离数组。<br>更新到F点距离，可以得到如下数组：  </p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">6</td><td align="center">11</td><td align="center">4</td><td align="center">10</td><td align="center">16</td></tr></tbody></table><h3 id="第五次选取"><a href="#第五次选取" class="headerlink" title="第五次选取"></a>第五次选取</h3><p>第一步：选取除了A B C D E节点之外的剩余节点中最短节点，也就是最后一个节点：F<br>第二步：以F点为最新节点，更新最短路径数组。由于F点是最后一个点，所以也不用更新数组，目前的数组就是所求数组将F点加入最短路径范围中，此时所有的点都加入了最短路径范围，也就是说A点到所有点的距离都找到了。最终得出的距离值为：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra7.png"                                     ><br>最终得到的结果为：  </p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">6</td><td align="center">11</td><td align="center">4</td><td align="center">10</td><td align="center">16</td></tr></tbody></table><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">6</td><td align="center">11</td><td align="center">4</td><td align="center">10</td><td align="center">16</td></tr></tbody></table><p>A-A: 0  </p><p>A-B: A-D-B:6<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra8.png"                                     ></p><p>A-C: A-D-E-C:11<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra9.png"                                     ></p><p>A-D:4<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra10.png"                                     ></p><p>A-E: A-D-E:10<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra11.png"                                     ></p><p>A-F: A-D-E-C-F:16<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://invictusqiu.oss-cn-beijing.aliyuncs.com/blog/CampusGuideSystem/Dijkstra12.png"                                     ></p><h2 id="代码实现Dijkstra算法"><a href="#代码实现Dijkstra算法" class="headerlink" title="代码实现Dijkstra算法"></a>代码实现Dijkstra算法</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INF 0x3f3f3f3f<span class="comment">//作为最大值</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Dijkstra算法全局变量</span></span><br><span class="line"><span class="type">bool</span> S[N];<span class="comment">//顶点集</span></span><br><span class="line"><span class="type">int</span> D[N];<span class="comment">//到各个顶点的最短路径</span></span><br><span class="line"><span class="type">int</span> Pr[N];<span class="comment">//记录前驱</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="type">int</span> n = G.vnum;<span class="comment">//n为图的顶点个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">S[i] = <span class="literal">false</span>;</span><br><span class="line">D[i] = G.E[v][i];</span><br><span class="line"><span class="keyword">if</span> (D[i] &lt; INF)</span><br><span class="line">&#123;</span><br><span class="line">Pr[i] = v;<span class="comment">//v与i连接，v为前驱</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Pr[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">S[v] = <span class="literal">true</span>;</span><br><span class="line">D[v] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//初始化结束，求最短路径，并加入S集</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> min = INF;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; n; w++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!S[w] &amp;&amp; D[w] &lt; min)<span class="comment">//某点temp未加入S集，且为当前最短路径</span></span><br><span class="line">&#123;</span><br><span class="line">temp = w;</span><br><span class="line">min = D[w];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">S[temp] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//更新从源点出发至其余点的最短路径 通过temp</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> w = <span class="number">0</span>; w &lt; n; w++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!S[w] &amp;&amp; D[temp] + G.E[temp][w] &lt; D[w])</span><br><span class="line">&#123;</span><br><span class="line">D[w] = D[temp] + G.E[temp][w];</span><br><span class="line">Pr[w] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出最短路径</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Path</span><span class="params">(Graph G, <span class="type">int</span> v)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Pr[v] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Path(G, Pr[v]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.V[Pr[v]] &lt;&lt; <span class="string">&quot;-&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="导游系统问路查询功能"><a href="#导游系统问路查询功能" class="headerlink" title="导游系统问路查询功能"></a>导游系统问路查询功能</h2><p>在了解以及实现了Dijkstra算法之后，我们还要在程序中调用它。  </p><ul><li>用户只需输入起点和终点，系统就会为用户提供最短路径。</li></ul><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用最短路径-Dijkstra算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Shortest_Dijkstra</span><span class="params">(Graph&amp; G)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> vname;</span><br><span class="line"><span class="built_in">string</span> vnamed;</span><br><span class="line"><span class="type">int</span> v1, v2;</span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1 = <span class="number">-1</span>;</span><br><span class="line">v2 = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入起点编号：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; vname;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vnum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (G.V[i] == vname)</span><br><span class="line">&#123;</span><br><span class="line">v1 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v1 == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没有找到输入点！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">drawMap();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入终点编号：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; vnamed;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vnum; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (G.V[i] == vnamed)</span><br><span class="line">&#123;</span><br><span class="line">v2 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v2 == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;没有找到终点！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">drawMap();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">Dijkstra(G, v1);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n目标点&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;最短路径值&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;最短路径&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G.vnum; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i != v1 &amp;&amp; i == v2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; G.V[i] &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; D[i] &lt;&lt; <span class="string">&quot;米&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">Path(G, i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; G.V[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>效果展示:</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入起点编号：1</span><br><span class="line">请输入终点编号：5</span><br><span class="line"></span><br><span class="line">目标点  最短路径值      最短路径</span><br><span class="line"> 5      400米           1-&gt;2-&gt;4-&gt;5</span><br></pre></td></tr></table></figure></div><h2 id="导游系统信息查询功能"><a href="#导游系统信息查询功能" class="headerlink" title="导游系统信息查询功能"></a>导游系统信息查询功能</h2><p>信息查询功能很简单，把预先准备的景点信息文件读取到程序的景点数据结构中，然后输出它就行了。  </p><p>部分代码展示</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">NameFile</span><span class="params">(Spot spt[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;Name.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">spt[i].number = i + <span class="number">1</span>;</span><br><span class="line">count = <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, spt[i].name);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, spt[i].name);测试代码</span></span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InfoFile</span><span class="params">(Spot spt[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">FILE* fp = fopen(<span class="string">&quot;Info.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;打开文件失败！\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">count = <span class="built_in">fscanf</span>(fp, <span class="string">&quot;%s&quot;</span>, spt[i].SpotInfo);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">-1</span>)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//printf(&quot;%s\n&quot;, spt[i].SpotInfo);测试代码</span></span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printInfo</span><span class="params">(Spot spt[], <span class="type">int</span> i)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n%d.%s\n简介：%s\n&quot;</span>, spt[i].number, spt[i].name, spt[i].SpotInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="导游系统景点类型查询功能"><a href="#导游系统景点类型查询功能" class="headerlink" title="导游系统景点类型查询功能"></a>导游系统景点类型查询功能</h2><p>功能分析：</p><ul><li>1个景点类型包含若干个景点</li><li>用户可以查询该景点类型包含哪几个景点</li><li>用户可以详细了解某一个景点的信息</li></ul><p>首先我们初始化景点类型数据结构，然后将各个景点进行类型分类，然后加入景点类型查询模块，后面嵌套一下景点信息查询模块。</p><p>部分代码展示：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TN 5<span class="comment">//类型数目值</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//景点类型数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SpotType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> typeName;</span><br><span class="line">Spot S[TN];</span><br><span class="line"><span class="type">int</span> number;</span><br><span class="line">&#125;SpotType;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化景点类型数据结构</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BuildingType</span><span class="params">(Spot spt[], SpotType stype[])</span></span><br><span class="line">&#123;</span><br><span class="line">stype[<span class="number">0</span>].typeName = <span class="string">&quot;教学楼&quot;</span>;</span><br><span class="line">stype[<span class="number">1</span>].typeName = <span class="string">&quot;学生宿舍&quot;</span>;</span><br><span class="line">stype[<span class="number">2</span>].typeName = <span class="string">&quot;食堂&quot;</span>;</span><br><span class="line">stype[<span class="number">3</span>].typeName = <span class="string">&quot;课外活动点&quot;</span>;</span><br><span class="line">stype[<span class="number">0</span>].S[<span class="number">0</span>] = spt[<span class="number">2</span>];</span><br><span class="line">stype[<span class="number">0</span>].S[<span class="number">1</span>] = spt[<span class="number">8</span>];</span><br><span class="line">stype[<span class="number">0</span>].S[<span class="number">2</span>] = spt[<span class="number">10</span>];</span><br><span class="line">stype[<span class="number">0</span>].number = <span class="number">3</span>;</span><br><span class="line">stype[<span class="number">1</span>].S[<span class="number">0</span>] = spt[<span class="number">4</span>];</span><br><span class="line">stype[<span class="number">1</span>].S[<span class="number">1</span>] = spt[<span class="number">6</span>];</span><br><span class="line">stype[<span class="number">1</span>].S[<span class="number">2</span>] = spt[<span class="number">7</span>];</span><br><span class="line">stype[<span class="number">1</span>].number = <span class="number">3</span>;</span><br><span class="line">stype[<span class="number">2</span>].S[<span class="number">0</span>] = spt[<span class="number">3</span>];</span><br><span class="line">stype[<span class="number">2</span>].S[<span class="number">1</span>] = spt[<span class="number">9</span>];</span><br><span class="line">stype[<span class="number">2</span>].number = <span class="number">2</span>;</span><br><span class="line">stype[<span class="number">3</span>].S[<span class="number">0</span>] = spt[<span class="number">1</span>];</span><br><span class="line">stype[<span class="number">3</span>].S[<span class="number">1</span>] = spt[<span class="number">5</span>];</span><br><span class="line">stype[<span class="number">3</span>].S[<span class="number">2</span>] = spt[<span class="number">12</span>];</span><br><span class="line">stype[<span class="number">3</span>].S[<span class="number">3</span>] = spt[<span class="number">14</span>];</span><br><span class="line">stype[<span class="number">3</span>].number = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询景点类型</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowType</span><span class="params">(Spot spt[], SpotType stype[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> select = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;                                                    |==============================|&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;                                                    |          1.&quot;</span> &lt;&lt; stype[<span class="number">0</span>].typeName &lt;&lt; <span class="string">&quot;            |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;                                                    |          2.&quot;</span> &lt;&lt; stype[<span class="number">1</span>].typeName &lt;&lt; <span class="string">&quot;          |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;                                                    |          3.&quot;</span> &lt;&lt; stype[<span class="number">2</span>].typeName &lt;&lt; <span class="string">&quot;              |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;                                                    |          4.&quot;</span> &lt;&lt; stype[<span class="number">3</span>].typeName &lt;&lt; <span class="string">&quot;        |&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;                                                    |==============================|&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择你需要您要了解的类型：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">switch</span> (select)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Print_Type(stype[select - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Print_Type(stype[select - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Print_Type(stype[select - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">Print_Type(stype[select - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入有效选项！\n回车键继续...&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">getchar();</span><br><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">drawMap();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n您需要了解以上建筑信息吗？（输入1了解，输入0取消）：&quot;</span>;</span><br><span class="line"><span class="type">int</span> select2;</span><br><span class="line"><span class="type">int</span> select3;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select2;</span><br><span class="line"><span class="keyword">if</span> (select2 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\n请输入你想要了解建筑的编号（输入0取消）：&quot;</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; select3;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select3 == <span class="number">3</span> || select3 == <span class="number">9</span> || select3 == <span class="number">11</span>)</span><br><span class="line">&#123;</span><br><span class="line">printInfo(spt, select3 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的此类型建筑编号！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select3 == <span class="number">5</span> || select3 == <span class="number">7</span> || select3 == <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line">printInfo(spt, select3 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的此类型建筑编号！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select3 == <span class="number">4</span> || select3 == <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">printInfo(spt, select3 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的此类型建筑编号！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (select == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (select3 == <span class="number">2</span> || select3 == <span class="number">6</span> || select3 == <span class="number">13</span> || select3 == <span class="number">15</span>)</span><br><span class="line">&#123;</span><br><span class="line">printInfo(spt, select3 - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select3 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确的此类型建筑编号！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (select2 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入正确选项！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (select3 == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次的校园导游系统是我的数据结构课程设计，希望这篇文章能够帮我记下Dijkstra算法的实际运用，今后遇到相应的算法也能够有解决思路。  </p><p>本次的导游系统介绍就到这了，有需要看源代码的朋友可以到我的 GitHub 仓库中查看。  </p><h1 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h1><p><a class="link"   href="https://github.com/InvictusEd/Campus-tour-guide-system.git" >校园导游系统 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p>本章一句：<br>当你因为错过太阳而哭泣的时候，你也要错过群星了。——泰戈尔《飞鸟集》</p></blockquote>]]></content>
    
    
    <summary type="html">校园导游系统是我的数据结构课程设计，这篇文章能够帮我记下 Dijkstra 算法的实际运用，今后遇到相应的算法也能够有解决思路。</summary>
    
    
    
    <category term="C++" scheme="https://blog.invictusqiu.top/categories/C/"/>
    
    <category term="算法" scheme="https://blog.invictusqiu.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://blog.invictusqiu.top/tags/C/"/>
    
    <category term="算法" scheme="https://blog.invictusqiu.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="最短路径" scheme="https://blog.invictusqiu.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
</feed>
